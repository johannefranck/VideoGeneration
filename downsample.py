import argparse
from PIL import Image
import matplotlib.pyplot as plt
import os

def inspect_image(img):
    print(f"Format: {img.format}")
    print(f"Size: {img.size} (width x height)")
    print(f"Mode: {img.mode}")

def resample_image(img, width, height, save_path):
    img_resized = img.resize((width, height), resample=Image.LANCZOS)
    os.makedirs(os.path.dirname(save_path), exist_ok=True)
    img_resized.save(save_path)
    print(f"Image saved to: {save_path}")
    print(f"New size: {img_resized.size}")

def parse_resample_size(size_str):
    try:
        width, height = map(int, size_str.lower().split('x'))
        return width, height
    except Exception:
        raise argparse.ArgumentTypeError("Resample size must be in the format WIDTHxHEIGHT (e.g., 256x256)")

def main():
    parser = argparse.ArgumentParser(description="Inspect and/or downsample an image.")
    parser.add_argument("--input_path", type=str, default="data/teapot/pred.png", help="Path to input image")
    parser.add_argument("--inspect", action="store_true", help="Print info and display image")
    parser.add_argument("--resample", action="store_true", help="Enable image resizing")
    parser.add_argument("--resample_size", type=parse_resample_size, default=(128, 128), help="Resize image to WIDTHxHEIGHT (e.g., 256x256)")
    parser.add_argument("--save_path", type=str, help="Path to save resized image (auto-generated by default)")

    args = parser.parse_args()
    img = Image.open(args.input_path)

    if args.inspect:
        inspect_image(img)

    if args.resample:
        width, height = args.resample_size

        # Auto-generate save_path if none was provided
        if not args.save_path:
            input_dir = os.path.dirname(args.input_path)
            base_name = os.path.basename(args.input_path)
            name, ext = os.path.splitext(base_name)
            save_path = os.path.join(input_dir, f"{name}_{width}x{height}{ext}")
        else:
            save_path = args.save_path

        resample_image(img, width, height, save_path)

if __name__ == "__main__":
    main()
